#!/bin/bash
#
# using the very nice "Markup.pl" from
# http://daringfireball.net/projects/markdown/syntax
#
# You need to configure block in ~/.block/config.
# An example ~/.block/config looks like this:
#
#   # Where does my block data live?
#   block_home=~/doc/block
#
#   # Where should I rsync the produced html and atom feed to?
#   block_dst=www.example.org:html/
#
#   # What's the URL of the resulting blog?
#   block_url=http://www.example.org/my_blog
#
# TODO: make it validate with http://validator.w3.org/
#
# (c) licensed under the GPLv2 license by Tomáš Pospíšek
#

usage() {
  echo 'usage:'
  echo '   article new                     - Write a new article'
  echo '   article to html <article>       - Output article in html form'
  echo '                                     to stdout.'
  echo '   article to atom <article.html>  - Output html in atom form'
  echo '                                     to stdout.'
  echo '   block                           - Edit new article and generate'
  echo '                                     blog and preview.'
  echo "   block home                      - Show block's home directory"
  echo '                                     use as: cd "`block home`".'
  echo '   block publish                   - Publish blog.'
  echo '   block rebuild                   - Rebuild blog from articles.'
  echo
  echo 'configuration:'
  echo '   ~/.block/config                 - Configuration file. Needs to'
  echo '                                     set the following variables:'
  echo '   block_home=/home/joe/block      - Path to block directory'
  echo '   block_dst=srv.example.org:website/'
  echo '                                   - Rsync style destination, where'
  echo '                                     the generated site will be'
  echo '                                     rsynced to.'
  echo '   block_url=http://www.example.org/'
  echo '                                   - Site URL'
  echo '                                     rsynced to.'
  echo
  echo 'directory layout:'
  echo '   block/input/articles            - your articles'
  echo '   block/input/bits                - stuff (images etc.) that you can'
  echo '                                     refer to from youryour articles'
  echo '   block/input/parts               - parts from which the html pages'
  echo '                                     and the atom feed will be'
  echo "                                     assembled. You'll want to edit"
  echo '                                     these.'
  echo
  echo 'project home: https://github.com/tpo/block'
  echo
  exit 1
}

set -e # exit after error

fail() {
  echo "$1" >&2
  exit -1
}

configure_paths() {
  # init block data paths
  articles=$block_home/input/articles
  block_parts=$block_home/input/parts
  article_signature=$block_parts/signature.html
  block_html_head=$block_parts/head.html
  block_html_top=$block_parts/top.html
  block_html_footer=$block_parts/footer.html
  block_html_toc_title=$block_parts/toc-title.html
  block_atom_header=$block_parts/head.xml
  block_atom_footer=$block_parts/footer.xml
  block_output=$block_home/output
  articles_html=$block_output/html
  articles_atom=$block_output/xml
  # the following three must reside directly under $block_output
  # see "rsync" below
  block_html=$block_output/index.html
  block_atom=$block_output/index.xml
  block_bits=$block_output/bits
  browser=${browser:-firefox}
}

# title_from_article path_to_article
# 
title_from_article() {
  # title is first line in file in markdown syntax: '## The Title'
  head -n 1 "$1"| sed 's/^## //'
}

# build something that can be used as a file name, html anchor
# and a url
article_name_from_title() {
  echo "$1" \
  | iconv -f UTF-8 -t ASCII//TRANSLIT//IGNORE \
  | tr '[:upper:]' '[:lower:]' \
  | tr '[:punct:]' '-' \
  | sed 's/ \{1,\}/-/g;' \
  | sed 's/-\{1,\}/-/g;'
  # last two lines: replace multiple spaces, then multiple dashes
}

url_from_anchor() {
	echo "$block_url#$1"
}

# title_from_html_version_of_article path_to_html_article
# 
title_from_html_version_of_article() {
  # title is first line in file in html syntax:
  #   <a name='$anchor'></a><a href='#$anchor'><h2>$title</h2></a>
  head -n 1 "$1"| sed 's/^.*<h2>//; s/<\/h2>.*//'
}

# anchor_from_html_version_of_article filename
# 
anchor_from_html_version_of_article() {
  # title is first line in file in html syntax:
  #   <a name='$anchor'></a><a href='#$anchor'><h2>$title</h2></a>
  head -n 1 "$1"| sed "s/^.*<a name='//; s/'>.*//"
}

article_name_from_path() {
  article_name=`basename "$1" | cut -d' ' -f2-`
  echo "$article_name"
}

# create_html_version_of_article path_to_article
#
create_html_version_of_article() {
  (
    (
      path_to_article=$1

      title=`title_from_article "$path_to_article"`
      anchor=`article_name_from_path "$path_to_article"`
      # attention: the following line needs to match
      # in (title|anchor)_from_html_version_of_article
      echo "<a name='$anchor'></a><a href='#$anchor'><h2>$title</h2></a>"
      echo
      # omit first line, since we've created the title ourselves
      tail -n +2 "$path_to_article"
    ) | markdown

    echo # newlines after each article
    echo # to make html more readable

  # process $includes
    # http://www.unix.com.ua/orelly/perl/cookbook/ch07_10.htm
  ) | perl -n -e \
           'if( /\$sourcecode(\s*)"(\S*)"/ ) {
              # replace HTML chars in sourcecode
              print(`cat '$block_bits/'$2 | sed "s/&/\\&amp;/g ; s/</\\\\&lt;/g ; s/>/\\\\&gt;/g"`);
              next; }
            else {
              print; }'
}

# see http://feedvalidator.org/docs/error/InvalidRFC3339Date.html
# fix broken format delivered by `date --rfc3339=seconds` ("date")
#                         and by `stat --format %z`       ("stat")
to_rfc3339(){
  # 1. replace first space with a 'T'   (date and stat)
  # 2. throw away fractions of a second (stat)
  # 3. offset is missing a collon       (stat)
  sed 's/ /T/;
       s/\.[0-9]* //;
       s/\([+-]\)\([0-9]\{2\}\)\([0-9]\{2\}\)/\1\2:\3/;'
}

# create_atom_version_of_html path_to_article.html
create_atom_version_of_html() {

  path_to_html_article="$1"
  updated=$( stat --format %z "$path_to_html_article" | to_rfc3339 )

  title=`title_from_html_version_of_article "$path_to_html_article"`
  anchor=`anchor_from_html_version_of_article "$path_to_html_article"`
  url=`url_from_anchor "$anchor"`

  # see http://www.atompub.org/rfc4287.html

  echo '<entry>'
    echo "<title>$title</title>"
    echo "<link href='$url'></link>"
    echo "<id>$url</id>"
    echo "<updated>$updated</updated>"
    echo '<content type="html"><![CDATA['
      cat "$path_to_html_article"
    echo ']]></content>'
  echo '</entry>'
}

last_article() {
  _last_article=`ls "$articles"|sort -n|tail -n 1`
  if [ "$_last_article" == "" ]; then
    echo "000 Phantom initial article"
  else
    echo "$_last_article"
  fi
}

is_number() {
  [[ "$1" =~ ^[0-9]+$ ]]
  return $?
}

# can exit if article name is broken
article_num() {
  num=$( echo "$1" |awk '{ print $1 }' )
  if is_number "$num"; then
    echo "$num"
  else
    echo "$0: Line $LINENO: article \"$1\" does not have an article number" >&2
    exit 1
  fi
}

create_html_toc() {
  echo '      <div class="toc">'
                cat "$block_html_toc_title"
  echo '        <ul>'
                  ls $articles_html/* | sort -n | tac | while read article; do
                    title=`title_from_html_version_of_article "$article"`
                    anchor=`anchor_from_html_version_of_article "$article"`
  echo "          <li><a href="#$anchor">$title</a></li>"
                  done
  echo '        </ul>'
  echo '      </div>'
}

create_html_block() {
  (
    cat $block_html_head
    echo '    <div class="wrap">'
    echo '      <div class="content">'
                  cat $block_html_top
                  # include in reverse order: most recent first
                  ls $articles_html/* | sort -n | tac | while read article; do
                    # indent text
                    cat "$article" | (
                      we_re_inside_a_code_section=no
		      # without IFS.. `read` will drop leading spaces
                      while IFS="\n" read line; do
                        if [[ $line =~ "<pre>" ]]; then
                          # don't indent <pre> sections
                          # evidently this is a cludge solution
                          echo "$line"
                          we_re_inside_a_pre_section=yes
                        elif [[ $line =~ "</pre>" ]]; then
                          echo "$line"
                          we_re_inside_a_pre_section=no
                        else
                          if [ "$we_re_inside_a_pre_section" == "yes" ]; then
                            echo "$line"
                          else
                            # indent
                            echo "        $line"
                          fi
                        fi
                      done
                    )
                  done
    echo '      </div>'
           create_html_toc
    echo '    </div>'
    cat $block_html_footer
  ) > $block_html
}

create_atom_block() {
  (
    cat $block_atom_header
    updated=$( date --rfc-3339=seconds | to_rfc3339 )
    echo "  <updated>$updated</updated>"
    echo
    for article in $articles_atom/*; do
      cat "$article"
    done
    cat $block_atom_footer
  ) > $block_atom
}

# new_article variable_to_assign_article_path_to
#
# variable_to_assign_article_path_to is the name of
# a variable to which the article path will be
# assigned to
#
new_article() {
  variable_to_assign_article_path_to="$1"

  # set article data
    # determine number the new article
    last_article_num=$( article_num "`last_article`" )
    new_article_num=$(( $last_article_num + 1 ))
    echo -n "Title of new article: "
    read title
    article_name=`article_name_from_title "$title"`
    path_to_article="$articles/$new_article_num $article_name"
    echo "## $title" >  "$path_to_article"
    echo             >> "$path_to_article"
  
  # edit article - jump to second line in insert mode
    vim +2 -c 'startinsert' "$path_to_article"
    [ ! -e "$path_to_article" ] && fail "aborted"
  # add signature
    (
      echo
      sig=`cat $article_signature`
      echo "$sig, `date +%F`"
    ) >> "$path_to_article"
  eval "$variable_to_assign_article_path_to='$path_to_article'"
}

# article_to_xxml path_to_article
#
article_to_xxml() {
  path_to_article="$1"
  article_name=$( basename "$path_to_article" )
  path_to_html_article="$articles_html/$article_name.html"
  path_to_atom_article="$articles_atom/$article_name.xml"

  create_html_version_of_article "$path_to_article"      > "$path_to_html_article"
  create_atom_version_of_html    "$path_to_html_article" > "$path_to_atom_article"
}

build_blocks() {
  create_html_block
  create_atom_block
}

rebuild() {
  for path_to_article in "$articles"/*; do
    article_to_xxml "$path_to_article"
  done
  build_blocks
}

publish() {
  ask_for_confirmation -y "publish?" || exit
  (
    cd $block_output
    rsync -avz --copy-unsafe-links `basename $block_html` `basename $block_atom` `basename $block_bits` $block_dst
  )
}

build_publish_preview() {
  build_blocks
  publish  
  $browser "$block_url"
}

missing_fail() {
  fail "You need to set $1 in the configuration file"
}

load_config() {
  source ~/.block/config || fail "Couldn't find config file ~/.block/config"
  [ -n "$block_home" ]   || missing_fail "block_home"
  [ -n "$block_dst" ]    || missing_fail "block_dst"
  [ -n "$block_url" ]    || missing_fail "block_url"
}

# this script is callable under different names and will
# then do different things
#
main() {
  load_config
  configure_paths

  cmd_path=`realpath "$0"`
  cmd_dir=`dirname $cmd_path`
  case `basename "$cmd_path"` in
    article)
      case "$1" in
        new)
          new_article path_to_article ;;
        to)
          case "$2" in
            html)
              create_html_version_of_article "$2" ;;
            atom)
              create_atom_version_of_html "$2" ;;
            *)
              usage ;;
          esac
          ;;
        *)
          usage ;;
      esac
      ;;
    block)
      case "$1" in
        home)
          echo $block_home
	  ;;
        publish)
          publish
          ;;
        rebuild)
          rebuild
          ;;
        "")
          new_article path_to_article
          article_to_xxml "$path_to_article"
          build_publish_preview
          ;;
        *)
          usage
          ;;
      esac
      ;;
    *)
      usage
      ;;
  esac
}

main "$@" # call main

# vim: expandtab
