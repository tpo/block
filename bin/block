#!/bin/bash
#
# DESCRIPTION
#
# `block` is a `Markdown` blogging tool
#
# `block` needs to be configured in `~/.block/config,`
# before you start using it. Like this:
#
#
# CONFIGURATION
#
#   $ cat ~/.block/config
#
#   # Where does my block data live?
#   block_home=~/doc/block
#
#   # Where should I rsync the produced html and atom feed to?
#   block_dst=www.example.org:html/
#
#   # What's the URL of the resulting blog?
#   block_url=http://www.example.org/my_blog
#
# DEPENDENCIES
#
# * #`block` uses uses node-marked
#
# SEE ALSO
#
# marked(1),markdown(1)
#
# THANKS
#
# * to Christopher Jeffrey for node-marked
# * John Gruber for Markdown
#
# TODO
#
# make `block` validate with http://validator.w3.org/
#
# COPYRIGHT
#
# (c) licensed under the GPLv2 license by Tomáš Pospíšek
#

#set -x

usage() {
#         ^.........................................................................$
    echo 'Usage:'
    echo
    echo '   block                              - Edit new article, build'
    echo '                                        blog and preview.'
    echo "   block home                         - Show block's home directory"
    echo '                                        use as: cd "`block home`".'
    echo '   block publish                      - Publish blog.'
    echo '   block update                       - Update blog from articles.'
    echo
    echo 'Configuration:'
    echo
    echo '   ~/.block/config                    - Configuration file. Needs to'
    echo '                                        set the following variables:'
    echo '   block_home=/home/joe/block         - Path to block directory'
    echo '   block_dst=srv.example.org:website/ - Rsync style destination, where'
    echo '                                        the built site will be'
    echo '                                        rsynced to.'
    echo '   block_url=http://www.example.org/  - URL under which this blog is'
    echo '                                        published.'
    echo
    echo 'Directory layout:'
    echo
    echo '   block/input/articles               - Your articles'
    echo '   block/input/bits                   - Stuff (images etc.) that you can'
    echo '                                        refer to from youryour articles'
    echo '   block/input/templates              - Templates that are used to'
    echo '                                        create the html pages and the'
    echo "                                        atom feed. You'll want to edit"
    echo '                                        these.'
    echo
    echo 'see also `article --help`'
    echo
    echo 'project home: https://github.com/tpo/block'
    echo
    exit 1
}

set -e # exit after error

# newest (largest number prefix) entry first
#
#   with_entries_in_dir directory command_to_execute
#
with_entries_in_dir() {
    local directory="$1"; shift
    find "$directory" -type f | sort -n -r | while read -r entry; do
        "$@" "$entry"
    done
}
  
# with newest (largest number prefix) article first
#
with_html_articles() {
    with_entries_in_dir "$articles_html/" "$@"
}

# with newest (largest number prefix) atom article first
#
with_atom_articles() {
    with_entries_in_dir "$articles_atom/" "$@"
}

cat_html_toc_entry() {
    local article="$1"
    TITLE=`article title_from_html "$article"`
    ANCHOR=`article anchor_from_html "$article"`
    build_from_template "toc_entry.html" TITLE ANCHOR
}

cat_html_toc() {
    TOC=`with_html_articles cat_html_toc_entry`
    build_from_template "toc.html" TOC
}

cat_articles_html() {
    with_html_articles cat
}

cat_articles_all_html() {
    TOC=`cat_html_toc`
    BODY=`cat_articles_html`
    build_from_template "articles_all.html" TOC BODY
}

cat_articles_feed_atom() {
    FEED_UPDATED=`date --rfc-3339=seconds | time_to_rfc3339`
    ARTICLES=`with_atom_articles cat`
    build_from_template "articles.atom" FEED_UPDATED ARTICLES
}

# update_article_flavors path_to_article
#
# only update article_flabours if original changed
#
# returns true if updated
#
update_article_flavors() {
    path_to_article="$1"
    article_name=`basename "$path_to_article"`
    path_to_html_article="$articles_html/$article_name.html"
    path_to_atom_article="$articles_atom/$article_name.atom"

    updated=false
    update_if_necessary \
        article build_html "$path_to_article"      > "$path_to_html_article" \
        && updated=true
    update_if_necessary \
        article build_atom "$path_to_html_article" > "$path_to_atom_article" \
        && updated=true

    [ "$updated" == "true" ]
}

build_blocks() {
    log "rebuilding $articles_all_html"
    cat_articles_all_html  > "$articles_all_html"

    log "rebuilt $articles_feed_atom"
    cat_articles_feed_atom > "$articles_feed_atom"
}

update() {
    updated=false
    for path_to_article in "$articles_src_dir"/*; do
        article update_flavors "$path_to_article" && updated=true
    done
    if   [ "$updated" == "true"     ] ||
       ! [ -e "$articles_all_html"  ] ||
       ! [ -e "$articles_feed_atom" ]; then
        build_blocks
    fi
}

publish() {
    ask_for_confirmation -y "publish?" || exit
    (
        cd $output_dir
        # TODO: basename required? quote variables?
        rsync -avz --copy-unsafe-links        \
            "$(basename $articles_all_html)"  \
            "$(basename $articles_feed_atom)" \
            "$(basename $block_bits)"         \
            $block_dst
    )
}

build_publish_preview() {
    build_blocks
    publish  
    $browser "$block_url"
}

missing_fail() {
    fail "You need to set $1 in the configuration file"
}

# differently named from the identical `article`function to
# evade naming conflict
#
load_config() {
    source ~/.block/config || (
        echo "Couldn't find config file ~/.block/config" >&2
        exit -1
    )
    source "$block_home/bin/lib/common.sh"
    check_config_or_fail
}

# this script is callable under different names and will
# then do different things
#
main() {
    load_config
    configure_paths
  
    # TODO: del?
    # cmd_path=`realpath "$0"`
    # cmd_dir=`dirname $cmd_path`
    case "$1" in
        home)
            echo $block_home
            ;;
        publish)
            publish
            ;;
        update)
            update
            ;;
        "")
            article new
            # we assume that out article is the last one that was created
            # create the path from $articles_src_dir/ and the name of the
            # last file
            path_to_article=$( echo -n "$articles_src_dir/" ;
                               ls  -tr "$articles_src_dir" | tail -n 1 )
            update_article_flavors "$path_to_article"
            build_publish_preview
            ;;
        *)
            usage
            ;;
    esac
}

main "$@" # call main

# vim: expandtab
