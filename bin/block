#!/bin/bash
about() {
    echo 'DESCRIPTION'
    echo
    echo '`block` is a `Markdown` blogging tool'
    echo
    echo '`block` needs to be configured in `~/.block/config,`'
    echo 'before you start using it. Like this:'
    echo
    echo 'DEPENDENCIES'
    echo
    echo '* #`block` uses uses node-marked'
    echo
    echo 'SEE ALSO'
    echo
    echo 'marked(1),markdown(1),`block --help`'
    echo
    echo 'THANKS'
    echo
    echo '* to Christopher Jeffrey for node-marked'
    echo '* John Gruber for Markdown'
    echo
    echo 'TODO'
    echo
    echo 'make `block` validate with http://validator.w3.org/'
    echo
    echo 'COPYRIGHT'
    echo
    echo '(c) licensed under the GPLv2 license by Tomáš Pospíšek'
    echo
    exit 0
}

#set -x

usage() {
#         ^.........................................................................$
    echo 'Usage:'
    echo
    echo '   block                              - Edit new article, build'
    echo '                                        blog and preview.'
    echo '   block --help                       - Display usage help.'
    echo '   block about                        - Display infos about block.'
    echo "   block home                         - Display block's home directory"
    echo '                                        use as: cd "`block home`".'
    echo '   block publish                      - Publish blog.'
    echo '   block view                         - View blog.'
    echo '   block update                       - Update blog from articles.'
    echo
    echo 'Configuration:'
    echo
    echo '   ~/.block/config                    - Configuration file. Needs to'
    echo '                                        set the following variables:'
    echo "   block_name='Joe\\'s Block blog'    - Name of the blog"
    echo '   block_home=/home/joe/block         - Where does my block data live?'
    echo '   block_dst=srv.example.org:website/ - Where should I rsync the'
    echo '                                        produced html and atom feed to?'
    echo '                                        the built site will be'
    echo '                                        rsynced to.'
    echo "   block_url=http://www.example.org/  - What's the URL of the resulting"
    echo '                                        blog?'
    echo
    echo 'Directory layout:'
    echo
    echo '   block/input/articles               - Your articles'
    echo '   block/input/bits                   - Stuff (images etc.) that you can'
    echo '                                        refer to from youryour articles'
    echo '   block/input/templates              - Templates that are used to'
    echo '                                        create the html pages and the'
    echo "                                        atom feed. You'll want to edit"
    echo '                                        these.'
    echo
    echo 'see also `article --help`'
    echo
    echo 'project home: https://github.com/tpo/block'
    echo
    exit 1
}

set -e # exit after error

# newest (largest number prefix) entry first
#
#   with_entries_in_dir directory command_to_execute
#
with_entries_in_dir() {
    local directory="$1"; shift
    find "$directory" -type f | sort -n -r | while read -r entry; do
        "$@" "$entry"
    done
}
  
# with newest (largest number prefix) article first
#
with_html_articles() {
    with_entries_in_dir "$articles_raw_html/" "$@"
}

# with newest (largest number prefix) atom article first
#
with_atom_articles() {
    with_entries_in_dir "$articles_atom/" "$@"
}

# init function for the cat_landing_page_articles function
#
init_cat_landing_page_articles() {
    landing_page_articles_counter=0
    LANDING_NEXT_ARTICLES=""
}

# this function needs to be initialized first with
# init_cat_landing_page_articles before calling it
#
# we'll have two full articles and 2 article extracts
# on the landing page
#
cat_landing_page_articles() {
    if   [ "$landing_page_articles_counter" -lt 2 ]; then
        # cat first two articles
        cat "$1"
    elif [ "$landing_page_articles_counter" -lt 4  ]; then
        # accumulate articles formated as 'toc_entry'
        LANDING_NEXT_ARTICLES=$(
            echo "$LANDING_NEXT_ARTICLES"
            cat_html_toc_entry "$1"
        )
    elif [ "$landing_page_articles_counter" -eq 4  ]; then
        build_from_template "landing_page_articles_next.html" LANDING_NEXT_ARTICLES
    fi
    # ignore all other articles

    landing_page_articles_counter=$(( $landing_page_articles_counter + 1 ))
}

cat_html_toc_entry() {
    local article="$1"
    TITLE=`article title_from_html "$article"`
    URL=`article rel_url_from_path "$article"`
    build_from_template "toc_entry.html" TITLE URL
}

cat_one_page_html_toc_entry() {
    local article="$1"
    TITLE=`article title_from_html "$article"`
    URL=`article anchor_url_from_path "$article"`
    build_from_template "toc_entry.html" TITLE URL
}

cat_one_page_html_toc() {
    cat "$toc_articles_one_page_html"
}

generate_html_toc() {
    TOC=`with_html_articles cat_html_toc_entry`
    BLOCK_URL="$block_url"
    build_from_template "toc.html" TOC BLOCK_URL > "$toc_html"
}

generate_one_page_html_toc() {
    TOC=`with_html_articles cat_one_page_html_toc_entry`
    BLOCK_URL="$block_url"
    build_from_template "toc.html" TOC BLOCK_URL > "$toc_articles_one_page_html"
}

cat_articles_html() {
    with_html_articles cat
}

generate_landing_page_articles_html() {
    init_cat_landing_page_articles
    with_html_articles cat_landing_page_articles
}

cat_articles_one_page_html() {
    # the index that contains all articles at once
    # has a different toc, that references entries
    # in the full page and not individial articles
    #
    TOC=`cat_one_page_html_toc`
    BODY=`cat_articles_html`
    TITLE="$block_name - all articles"
    BLOCK_NAME="$TITLE"
    build_html_page TITLE BODY TOC BLOCK_NAME
}

cat_articles_landing_page_html() {
    TOC=`cat_html_toc`
    BODY=`generate_landing_page_articles_html`
    TITLE="$block_name"
    BLOCK_NAME="$TITLE"
    build_html_page TITLE BODY TOC BLOCK_NAME
}

cat_articles_feed_atom() {
    FEED_UPDATED=`date --rfc-3339=seconds | time_to_rfc3339`
    ARTICLES=`with_atom_articles cat`
    TITLE="$block_name"
    BLOCK_URL="$block_url"
    build_from_template "articles.atom" FEED_UPDATED ARTICLES TITLE BLOCK_URL
}

build_blocks() {
    log "rebuilding $articles_one_page_html"
    cat_articles_one_page_html     > "$articles_one_page_html"

    log "rebuilding $articles_landing_page_html"
    cat_articles_landing_page_html > "$articles_landing_page_html"

    log "rebuilding $articles_feed_atom"
    cat_articles_feed_atom         > "$articles_feed_atom"
}

generate_tocs() {
    generate_html_toc
    generate_one_page_html_toc
}

update() {
    updated=false

    update_articles() {
        for path_to_article in "$articles_src_dir"/*; do
            article update_flavors "$path_to_article" && updated=true
        done
    }

    if [ ! -e "$toc_articles_one_page_html" -o \
         ! -e "$toc_html"                         ]; then
        generate_tocs
    fi

    update_articles

    # if any article changed, then a title of and
    # article might have changed, thus regenerate
    # the toc
    if [ "$updated" == "true" ]; then
        generate_tocs
    fi

    if   [ "$updated" == "true"          ] ||
       ! [ -e "$articles_one_page_html"  ] ||
       ! [ -e "$articles_landing_html"   ] ||
       ! [ -e "$articles_feed_atom" ]; then
        build_blocks
    fi
}

# publish [no_prompt]
#
publish() {
    [ "$1" != "no_prompt" ] && ( ask_for_confirmation -y "publish?" || exit )
    (
        cd $output_dir
        # TODO: basename required? quote variables?
        rsync -avz --copy-unsafe-links                \
            "$(basename $articles_one_page_html)"     \
            "$(basename $articles_landing_page_html)" \
            "$(basename $articles_feed_atom)"         \
            "$(basename $block_bits)"                 \
            "$(basename $articles_html)"              \
            "$(basename $toc_html)"                   \
            $block_dst
    )
}

view() {
    $browser "$block_url"
}

missing_fail() {
    fail "You need to set $1 in the configuration file"
}

# differently named from the identical `article`function to
# evade naming conflict
#
load_config() {
    source ~/.block/config || (
        echo "Couldn't find config file ~/.block/config" >&2
        exit -1
    )
    source "$block_home/bin/lib/common.sh"
    check_config_or_fail
}

# this script is callable under different names and will
# then do different things
#
main() {
    load_config
    configure_paths
  
    case "$1" in
        home)
             echo $block_home
             ;;
        publish)
             publish no_prompt
             ;;
        view)
            view
            ;;
        update|about)
            "$1"
            ;;
        "")
            article new
            # we assume that out article is the last one that was created
            # create the path from $articles_src_dir/ and the name of the
            # last file
            path_to_article=$( echo -n "$articles_src_dir/" ;
                               ls  -tr "$articles_src_dir" | tail -n 1 )
            update
            publish  
            view
            ;;
        *)
            usage
            ;;
    esac
}

main "$@" # call main

# vim: expandtab
